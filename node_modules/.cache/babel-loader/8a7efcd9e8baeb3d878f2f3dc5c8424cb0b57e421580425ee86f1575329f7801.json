{"ast":null,"code":"import axios from \"axios\";\nimport { createMovieFailure, createMovieStart, createMovieSuccess, deleteMovieFailure, deleteMovieStart, deleteMovieSuccess, getMovieFailure, getMovieStart, getMovieSuccess, getMoviesFailure, getMoviesStart, getMoviesSuccess, updateMovieFailure, updateMovieStart, updateMovieSuccess } from \"./MovieActions\";\nimport { makeRequest } from \"../../axios\";\n\n//get All movies\nexport const getMovies = async dispatch => {\n  dispatch(getMoviesStart());\n  try {\n    const res = await makeRequest.get(\"/movies\", {\n      headers: {\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken\n      }\n    });\n    dispatch(getMoviesSuccess(res.data));\n  } catch (err) {\n    dispatch(getMoviesFailure());\n  }\n};\n\n//get a movie\nexport const getMovie = async (id, dispatch) => {\n  dispatch(getMovieStart());\n  try {\n    const res = await makeRequest.get(`/movies/find/${id}`, {\n      headers: {\n        Authorization: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken\n      }\n    });\n    dispatch(getMovieSuccess(res.data));\n  } catch (err) {\n    dispatch(getMovieFailure());\n  }\n};\n\n//create\nexport const createMovie = async (movie, dispatch) => {\n  dispatch(createMovieStart());\n  try {\n    const res = await makeRequest.post(\"/movies\", movie, {\n      headers: {\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken\n      }\n    });\n    dispatch(createMovieSuccess(res.data));\n  } catch (err) {\n    dispatch(createMovieFailure());\n  }\n};\n//delete\nexport const updateMovie = async (id, inputs, dispatch) => {\n  dispatch(updateMovieStart());\n  try {\n    const movie = await makeRequest.put(\"/movies/\" + id, inputs, {\n      headers: {\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken\n      }\n    });\n    dispatch(updateMovieSuccess(movie.data));\n    return movie.data;\n  } catch (err) {\n    dispatch(updateMovieFailure());\n    throw err;\n  }\n};\n\n//delete\nexport const deleteMovie = async (id, dispatch) => {\n  dispatch(deleteMovieStart());\n  try {\n    await makeRequest.delete(\"/movies/\" + id, {\n      headers: {\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken\n      }\n    });\n    dispatch(deleteMovieSuccess(id));\n  } catch (err) {\n    dispatch(deleteMovieFailure());\n  }\n};","map":{"version":3,"names":["axios","createMovieFailure","createMovieStart","createMovieSuccess","deleteMovieFailure","deleteMovieStart","deleteMovieSuccess","getMovieFailure","getMovieStart","getMovieSuccess","getMoviesFailure","getMoviesStart","getMoviesSuccess","updateMovieFailure","updateMovieStart","updateMovieSuccess","makeRequest","getMovies","dispatch","res","get","headers","token","JSON","parse","localStorage","getItem","accessToken","data","err","getMovie","id","Authorization","createMovie","movie","post","updateMovie","inputs","put","deleteMovie","delete"],"sources":["C:/Users/makha/OneDrive/Documents/React projects/Portfolio/frontend-backend/netflix-app-mern/admin2/src/context/movieContext/apiCalls.js"],"sourcesContent":["import axios from \"axios\";\nimport {\n  createMovieFailure,\n  createMovieStart,\n  createMovieSuccess,\n  deleteMovieFailure,\n  deleteMovieStart,\n  deleteMovieSuccess,\n  getMovieFailure,\n  getMovieStart,\n  getMovieSuccess,\n  getMoviesFailure,\n  getMoviesStart,\n  getMoviesSuccess,\n  updateMovieFailure,\n  updateMovieStart,\n  updateMovieSuccess,\n} from \"./MovieActions\";\nimport { makeRequest } from \"../../axios\";\n\n//get All movies\nexport const getMovies = async (dispatch) => {\n  dispatch(getMoviesStart());\n  try {\n    const res = await makeRequest.get(\"/movies\", {\n      headers: {\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\n      },\n    });\n    dispatch(getMoviesSuccess(res.data));\n  } catch (err) {\n    dispatch(getMoviesFailure());\n  }\n};\n\n//get a movie\nexport const getMovie = async (id, dispatch) => {\n  dispatch(getMovieStart());\n  try {\n    const res = await makeRequest.get(`/movies/find/${id}`, {\n      headers: {\n        Authorization: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\n      },\n    });\n    dispatch(getMovieSuccess(res.data));\n  } catch (err) {\n    dispatch(getMovieFailure());\n  }\n};\n\n//create\nexport const createMovie = async (movie, dispatch) => {\n  dispatch(createMovieStart());\n  try {\n    const res = await makeRequest.post(\"/movies\", movie, {\n      headers: {\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\n      },\n    });\n    dispatch(createMovieSuccess(res.data));\n  } catch (err) {\n    dispatch(createMovieFailure());\n  }\n};\n//delete\nexport const updateMovie = async (id, inputs, dispatch) => {\n  dispatch(updateMovieStart());\n  try {\n    const movie = await makeRequest.put(\"/movies/\" + id, inputs, {\n      headers: {\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\n      },\n    });\n    dispatch(updateMovieSuccess(movie.data));\n    return movie.data;\n  } catch (err) {\n    dispatch(updateMovieFailure());\n    throw err;\n  }\n};\n\n\n//delete\nexport const deleteMovie = async (id, dispatch) => {\n  dispatch(deleteMovieStart());\n  try {\n    await makeRequest.delete(\"/movies/\" + id, {\n      headers: {\n        token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\n      },\n    });\n    dispatch(deleteMovieSuccess(id));\n  } catch (err) {\n    dispatch(deleteMovieFailure());\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}